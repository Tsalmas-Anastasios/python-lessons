# αρχή του παιχνιδιού


# initialize_pygame()

# while True:
#     handle_input()
#     process_game_logic()
#     draw_game_elements()

# Σχολιασμός κώδικα
# -----------------
#
# Η γραμμή 3 ξεκινά έναν βρόχο, που ονομάζεται βρόχος του παιχνιδιού.
# Κάθε επανάληψη αυτού του βρόχου δημιουργεί ένα μόννο πλαίσιο του παιχνιδιού και συνήθως
# εκτελεί τις ακόλουθες λειτουργίες:
#   - Χειρισμός εισόδων
#     Συλλέγονται οι είσοδοι από το πληκτρολόγιο, όπως πλήκτρα που πατιούνται, η κίνηση του
#     ποντικιού και στη συνέχεια γίνεται ο χειρισμός. Ανάλογα με το παιχνίδι, μπορεί τα αντικείμενα
#     να αλλάξουν τη θέση τους, να δημιουργήσουν νέα αντικείμενα, να ζητήσουν το τέλος του
#     παιχνιδιού και ούτωκαθεξής.
#   - Λογική του παιχνιδιού
#     Εδώ υλοποιούνται οι περισσότεροι μηχανισμοί του παιχνιδιού. Εφαρμόζοννται οι κανόνες της
#     της φυσικής, οι συγκρούσεις εντοπίζονται και αντιμετωπίζονται κ.ο.κ. Αυτό το μέρος είναι
#     επίσης υπεύθυνο για τον έλεγχο εάν ο παίκτης έχει κερδίσει ή χάσει το παιχνίδι.
#   - Σχεδιασμός στοιχείων
#     Εάν το παιχνίδι δεν έχει τελειώσει ακόμα, τότε εδώ θα σχεδιαστεί το πλαίσιο στην οθόνη. Θα
#     περιλαμβάνει όλα τα αντικείμενα που βρίσκονται αυτή τη στιγμή στο παιχνίδι και είναι ορατά
#     στον παίκτη.
#
# Η γενική δομή ενός παιχνιδιού Pygame δεν είναι περίπλοκη και πιθανότατα θα μπορούσαε να
# ενεργήσοουμε βάζοντας τα πάντα στον παραπάνω βασικό βρόχο. Ωστόσο, λαμβάνοντας υπόψη ότι ενδέχεται
# να επεκτείνουμε το παιχνίδι στο μέλλον, αλλά και για την καλύτερη αναγνωσιμότητα του κώδικα και τη
# χρήση καλύτερων προγραμματιστικών πρακτικών, είναι καλή ιδέα να ενσωματώσουμε όλες αυτές τις
# λειτουργίες σε μια κλάση.
#
# ----
#
# Στο αρχείο αυτό θα υπάρχει η κύρια λειτουργία του παιχνιδιού.
#
# ----
#
# Παρακάτω φαίνεται ο κώδικας
import pygame

from models import GameObject
from utils import load_sprite


class SpaceRocks:
    def __init__(self):
        self._init_pygame()
        self.screen = pygame.display.set_mode((800, 600))
        self.background = load_sprite("space", False)
        self.clock = pygame.time.Clock()
        self.spaceship = GameObject((400, 300), load_sprite("spaceship"), (0, 0))
        self.asteroid = GameObject((400, 300), load_sprite("asteroid"), (1, 0))

    def main_loop(self):
        while True:
            self._handle_input()
            self._process_game_logic()
            self._draw()

    def _init_pygame(self):
        pygame.init()
        pygame.display.set_caption("Space Rocks")

    def _handle_input(self):
        for event in pygame.event.get():
            if event.type == pygame.QUIT or (
                event.type == pygame.KEYDOWN and event.key == pygame.K_ESCAPE
            ):
                quit()

    def _process_game_logic(self):
        self.spaceship.move()
        self.asteroid.move()

    def _draw(self):
        self.screen.blit(self.background, (0, 0))
        self.spaceship.draw(self.screen)
        self.asteroid.draw(self.screen)
        pygame.display.flip()
        self.clock.tick(60)


# Σχολιασμός του παραπάνω κώδικα
# ------------------------------
#
# Γραμμή 44
# Εισάγει τη λειτουργική μονάδα Pygame για να αποκτήσουμε πρόσβαση σε όλες
# τις λειτουργίες της
#
# Γραμή 47
# Δημιουργεί την κλάση SpaceRocks
#
# Γραμμή 48
# Είναι ο κατασκευαστής της κλάσης SpaceRocks και είναι το τέλειο μέρος για
# να τοποθετήσουμε όλες τις μεθόδους που απαιτούνται για την προετοιμασία του Pygame.
# Η πραγματική προετοιμασία του Pygame γίνεται στο _init_pygame().
#
# Γραμμή 50
# Δημιουργεί μια επιφάνεια (screen) προβολής. Οι εικόνες στο Pygame αντιπροσωπεύονται
# από επιφάνειες. Εδώ είναι μερικά πράγματα που πρέπει να γνωρίζουμε γι' αυτές:
#   - Οι επιφάνειες μπορούν να σχεδιαστούν η μία πάνω στην άλλη, επιτρέποντάς μας να
#     δημιουργήσουμε σύνθουμες σκηνές από απλές εικόνες
#   - Υπάρχει μία ειδική επιφάνεια σε κάθε έργο Pygame. Αυτή η επιφάνεια αντιπροσωπεύει
#     την οθόνη και είναι αυτή που τελικά θα εμφανίζεται στους παίκτες. Όλες οι άλλες
#     επιφάνειες πρέπει να σχεδιαστούν σε αυτήν κάποια στιγμή. Διαφορετικά δεν θα
#     εμφανιστούν.
#   - Για να δημιουργήσουμε την επιφάνεια της οθόνης, το πρόγραμμά μας χρησιμοποιεί τη
#     γραμμή pygame.display.set_set_mode(). Το μόννο όρισμα που μεταβιβάζουμε σε αυτή τη
#     μέθοδο είναι το μέγεθος της οθόνης, που αντιπορσωπεύεται από μια πλειάδα δύο τιμών.
#     (πλάτος & ύψος). Σε αυτή τη περίπτωση, το Pygame θα δημιουργήσει μια οθόνη με πλάτος
#     800pixel και ύψος 600pixel.
#
# Γραμμή 52-53
# Είναι ο βρόχος του παιχνιδιού (όπως συζητήθηκε παραπάνω). Περιλαμβάνει τα ίδια τρία βήματα
# για κάθε πλαίσιο:
#   - Γραμμή 54: περιέχει χειρισμό εισόδου
#   - Γραμμή 55: περιέχει τη λογική του παιχνιδιού
#   - Γραμμή 56"περιέχει τον σχεδιασμό
#
# Γραμμή 59
# Ορίζει μια μέθοδο που ονομάζεται _init_pygame(). Εδώ συμβαίνει μια εφάπαξ προετοιμασία του
# Pygame. Η μέθοδος κάνει δύο πράγματα:
#   - κλήση στη pygame.init(). Αυτή η μοναδική γραμμή κώδικα είναι υπεύθυνη για τη ρύθμιση των
#     χαρακτηριστικών του Pygame. Κάθε φορά που εργαζόμαστε με το Pygame, θα πρέπει να καλούμε
#     την pygame.init() στη αρχή του προγράμματος για να βεβαιωνόμαστε ότι το πλαίσιο θα λειτουργεί
#     σωστά.
#   - Η γραμμή 60 ορίζει τη λεζάντα του προγράμματος Pygame χρησιμοποιώντας το pygame.display.set_caption().
#     Σε αυτή την περίπτωση, η λεζάντα θα είναι το όνομα Asteroids.
#
# Γραμμή 62 & 65
# Ορίζουν τις _handle_input() και _process_game_logic(). Είναι δύο συναρτήσεις τις οποίες και
# αφήνουμε άδειες προς το παρόν.
#
# Γραμμή 68
# Ορίζουμε την _draw(). Δεν θα είχε πολύ νόημα να δημιουργήσουμε ένα πρότυπο για το παιχνίδι
# μας χωρίς να εμφανίζεται τίποτα στην οθόνη, επομένως αυτή η μέθοδος έχει ήδη κάποιο κώδικα.
# Ονομάζεται κάθε καρέ για να σχεδιάσει το περιεχόμενο της οθόνης και αυτό το κάνει σε δύο βήματα:
#   - Η γραμμή 69 γεμίζει την οθόνη με ένα χρώμα χρησιμοποιώντας τη screen.fill(). Η μέθοδος
#     παίρνει μια πλειάδα με 3 τιμές, που αντιπροσωπεύουν τρία βασικά χρώματα: κόκκινο, κίτρινο
#     πράσινο και μπλε. Κάθε τιμή χρώματος κυμαίνεται μεταξύ 0 και 255, αντιπροσωπεύοντας την έντασή του.
#     Σε αυτό το παράδειγμα, μια πλειάδα των (0, 0, 255) σημαίνει ότι το χρώμα θα αποτελείται μόνο
#     από μπλε, χωρίς ίχνη κοκκινου ή πράσινου.
#   - Η γραμμή 70, ενημερώνει το περιεχόμενο της οθόνης χρησιμοποιώντας το pygame.display.fli().
#     Επειδή το παιχνίδι θα εμφανίζει κινούμενα αντικείμενα, θα καλούμε αυτή τη μέθοδο σε κάθε
#     καρέ για να ενημερώνοουμε την οθόνη. Εξαιτίας αυτού, πρέπει να γεμίζουμε την οθόνη μας με χρώματα
#     σε κάθε καρέ, καθώς η μέθοδος θα καθαρίει τα περιεχόμενα που δημιουργήθηκαν στο προηγούμενο καρέ.
#
#
# Μέχρι τιγμής, ο κώδικάς μας φαίνεται να έχει πολλά επιπλέον βήματα, αλλά τώρα ο κώδικας είναι
# όμορφα δομημένος και έχει μεθόδους με περιγραφικά ονόματα. Την επόμενη φορά που θα χρειαστεί να
# αλλάξουμε κάτι που σετίζεται με το σχεδιασμό, θα ξέρουμε ότι θα πρέπει να παραμετροποιήσουμε την
# _draw().
#
#       Σχόλιο
#       Κανονικά θα θέταμε μεταβλητές όπως το μέγεθος και το χρώμα της οθόνης σε μια σταθερά
#       στην αρχή της κλάσης. Ωστόσο, σε λίγα βήματα, θα αντικαταστήσουμε το χρώμα με μια εικόνα
#       και δεν θα χρησιμοποιήσουμε το μέγεθος της οθόνης εκτός από αυτή τη μέθοδο. Έτσι αφήνουμε
#       τιμές ώς έχουν.
#
# Στη συνέχεια, δημιουργούμε ένα __main__.py αρχείο. Αυτό το αρχειο θα φροντίσει να δημιουργήσει ένα
# νέο στιγμιότυπο του παιχνιδιού και να το ξεκινήσει εκτελώντας το main_loop().
#
# Ο κώδικας υπάρχει στο __main__.py.


# Χειρισμός εισόδου
# -----------------
#
# Η μγαλύερη επεξεργασία εισόδου στο Pygame γίνεται μέσα σε έναν βρόχο συμβάντων. Σε κάθε καρέ, το
# πρόγραμμά μας μπορεί να λάβει μια συλλογή γεγονότων που συνέβησαν από το προηγούμενο καρέ.
#
# Αυτό περιλαμβάνει την κίνηση του ποντικιού, τα πιθανά πατήματα πλήκτρων και ούτω καθεξής. Στη συνέχεια
# ένα προς ένα, αυτά τα γεγονότα μπορούν να αντιμετωπιστούν. Στο Pygame, η μεέθοδος απόκτησης αυτής της
# συλλογής είνναι η pygame.event.get().
#
# Η δήλωση που χρειαζόμαστε αυτή τη στιγμή είναι pygame.QUIT (έτσι σταματάμε την εκτέλεση του
# παιχνιδιού).
#
# Θα πρέπει να τροποποιήσουμε την SpaceRocks._handle_input() από
# def _handle_input(self):
#     pass
#
# σε
# def _handle_input(self):
#   for event in pygame.event.get():
#       if event.type == pygame.QUIT:
#           quit()
#
# Μπορούμε ήδη να το δοκιμάσουμε και εδώ είναι αυκαιρία να πούμε πως μπορούμε να συσχετίζουμε πλήκτρα
# του πληκτρολογίου με λειτουργίες του παιχνιδιού, διαβάζοντας στην τεκμηρίωση του pygame
# (https://www.pygame.org/docs/ref/key.html)
#
# Στο παιχνίδι μας τώρα για να κλείσουμε το παιχνίδι πατώντας Esc, θα χρησιμοποιήσουμε το pygame.ESCAPE
#
# Θα πρέπει να τροποποιήσουμε την SpaceRocks._handle_input() από
# def _handle_input(self):
#   for event in pygame.event.get():
#       if event.type == pygame.QUIT:
#           quit()
#
# σε
# def _handle_input(self):
#   for event in pygame.event.get():
#       if event.type == pygame.QUIT or (event.type == pygame.KEYDOWN and event.key == pygame.K_ESCAPE):
#           quit()
#
#
# Τώρα το παιχνίδι μας κλείνει όταν πατάμε ESC.


#
#
# Εισαγωγή εικόνων
# ----------------
#
# Αν και θα μπορούσαμε να φτιάξουμε ένα παιχνίδι στον υπολογιστή μόνο με χρωματιστά ορθογώνια και άλλα
# απλά σχήματα, η χρήση εικόνων θα το κάνει πολύ πιο ελκυστικό. Στην ανάπτυξη παιχνιδιών υπολογιστή,
# οι εικόνες ονομάζονται συνήηθως sprites. Φυσικά, τα παιχνίδια χρησιμοποιούν πολύ περισσότερους
# τύπους πόρων, όπως ήχους, γραμματοσειρές, κινούμενα σχέδια και ούτω καθεξής. Οι πόροι αυτοί,
# συνήθως ονομάζονται assets.
#
# Καθώς το παιχνίδι μας μεγαλώνει, είναι σημαντικό να διατηρεί τη σωστή δομή. Δημιουργούμε λοιπόν έναν
# φάκελο με το όνομα assets και μέσα ασε αυτόν, ένα άλλο φάκελο με το όνομα sprites. Εκεί θα βάλουμε
# όλα τα sprites που θα χρησιμοποιεί το παιχνίδι.
#
# Επίσης, επειδή οι εικόνες θα φορτωθούν πολλές φορές στο πρόγραμμά μας, είναι καλή ιδένα να εξάγουμε
# αυτή την λειτουργία σε ξεχωριστή μέθοδο σε ξεχωριστό αρχείο. Ας δημιουργήσουμε ένα αρχείο με το
# όνομα utils.py που θα διατηρεί όλες τις επαναχρησιμοποιήσιμες μεθόδους. Στη συνέχεια, εφαρμόζουμε τη
# φόρτωση εικόνας (στο utils.py)
#
# Τώρα που το πρόγραμμά μας μπορεί να φορτώσει εικόνες, ήρθε η ώρα να αλλάξουμε το μπλε φόντο σε
# κάτι πιο ενδιαφέρον:
# Επεξεργαζόμαστε το αρχείο (με την κλάση SpaceRocks) και το μετατρέπουμε από:
# class SpaceRocks:
#     def __init__(self):
#         self._init_pygame()
#         self.screen = pygame.display.set_mode((800, 600))

#     def main_loop(self):
#         while True:
#             self._handle_input()
#             self._process_game_logic()
#             self._draw()

#     def _init_pygame(self):
#         pygame.init()
#         pygame.display.set_caption("Asteroids")

#     def _handle_input(self):
#         for event in pygame.event.get():
#             if event.type == pygame.QUIT or (
#                 event.type == pygame.KEYDOWN and event.key == pygame.K_ESCAPE
#             ):
#                 quit()

#     def _process_game_logic(self):
#         pass

#     def _draw(self):
#         self.screen.fill((0, 0, 255))
#         pygame.display.flip()
#
#
# σε:
# ---
#
# class SpaceRocks:
#     def __init__(self):
#         self._init_pygame()
#         self.screen = pygame.display.set_mode((800, 600))
#         self.background = load_sprite("space", False)

#     def main_loop(self):
#         while True:
#             self._handle_input()
#             self._process_game_logic()
#             self._draw()

#     def _init_pygame(self):
#         pygame.init()
#         pygame.display.set_caption("Space Rocks")

#     def _handle_input(self):
#         for event in pygame.event.get():
#             if event.type == pygame.QUIT or (
#                 event.type == pygame.KEYDOWN and event.key == pygame.K_ESCAPE
#             ):
#                 quit()

#     def _process_game_logic(self):
#         pass

#     def _draw(self):
#         self.screen.fill((0, 0, 255))
#         pygame.display.flip()
#
# Για να εμφανίσουμε μια επιφάνεια σε μια άλλη στο Pygame, πρέπει να καλέσουμε την επιφάνεια που
# θέλουμε να σχεδιάσουμε με τη μέθοδο blit(). Αυτή η μέθοδος παίρνει δύο ορίσματα:
#   - Την επιφάνεια που θέλουμε να σχεδιάσουμε
#   - Το σημείο που θέλουμε να σχεδιάσουμε
#
# Είναι καλό να έχουμε κατά νου ότι στο Pygame, το σύστημα συντεταγμένων ξεκινά από την επάνω
# αριστερή γωνία. Ο άξονας x πηγαίνει από αριστερά προς τα δεξία και ο άξονας y πηγαίνει από πάνω
# προς τα κάτω.
#
# Στην περίπτωσή μας, το νέο φόντο έχει το ίδιο μέγεθοςμε την οθόνη (800x600pixel), επομένως οι συντεταγμένες
# θα είναι (0, 0), που αντιπροσωπεύουν την επάνω αριστερή γωνία της οθόνης. Με αυτόν τον τρόπο, η εικόνα
# φόντου θα καλύπτει ολόκληρη την οθόνη.


#
#
# Έλεγχος των αντικειμένων του παιχνιδιού
# ---------------------------------------
#
# Σε αυτό το σημείο, το πρόγραμμά μας εμφανίζει μια εικόνα φόντου ενός μικρού κομματιού του
# σύμπαντος όπου θα λάβει χώρα το παιχνίδι.
#
# Είναι λίγο άδειο αυτή τη στιγμή, οπότε σε αυτή την ενότητα θα το γεμίσυμε
#
# Θα δημιουργήσουμε μια κλάση που αντιπροσωπεύει άλλα αντικείμενα του παινιδιού με δυνατότητα σχεδίασης και
# θα τη χρησιμοποιήσουμε ένα διαστημόπλοιο και έναν αστεροειδή.
#
#
# Προηγούμενη συμπεριφορά:
# Έχουμε ήδη χρησιμοποιήσει επιφάνειες, αλλά το Pygame προσφέρει επίσης μια άλλη κατηγορία Sprite, η
# οποία προορίζεται ως βασική κατηγορία για ορατά αντικείμενα. Περιέχει μερικές χρήσιμες μεθόδους,
# αλλά επίσης θα έχουμε και κάποιους περιορισμούς.
#
# Ένας περιορισμός είναι ότι ένα αντικείμενο του παιχνιδιού είναι κάτι περισσότερο από ένα απλό sprite.
# Περιέχει πρόσθετα δεδομένα, όπως η κατεύθυνση και η ταχύτητά του. Χρειάζεται επίσης πιο προηγμένες
# συμπεριφορές, όπως να πυροβολεί σφαίρες ή να παίζει ήχους. Οι περισσότερες από αυτές τις πρόσθετες
# πληροφορίες και συμπεριφορέςδεν παρέχονται από την κλάση Sprite, επομένως θα πρέπει να τις προσθέσουμε
# μόνοι μας.
#
# Ένα άλλο ζήτημα ότι το Pygame σχεδιάζει sprites ξεκινώντας από την επάνω αριστερή γωνία. Στο παιχνίδι μας,
# μπορεί να είναι ευκολοτερο να αποθηκεύσουμε την κεντρική θέση ενός αντικειμένου με σκοπό τη
# μετακίνηση και την περιστροφή του. Σε αυτή τη περίπτωση, θα πρέπει να εφαρμόσουμε έναν τρόπο για να
# μετατρέψουμε αυτή τη θέση σε μια επάνω αριστερή γωνία όπως απαιτείται από το Pygame.
#
# Τέλος, αν και το Pygame έχει ήδη μεθόδους για τον εντοπισμό επικαλύψεων μεταξύ εικόνων, μπορεί να
# μην είναι καλές για τον εντοπισμό συγκρούσεων μεταξύ αντικειμένων. Ένα περιστρεφόμενο διαστημόπλοιο
# ή ένας αστεροειδής πιθανότατα δεν θα γεμίσει ολόκληρη την εικόνα, αλλά μάλλον τη στρογγυλή περιοχή,
# μέσα σε αυτή. Σε ααυτή την περίπτωση,η σύγκρουση θα πρέπει να λαμβάνει υπόψη μόνο αυτή τη στρογγυλή περιοχή
# όχι ολόκληρη την επιφάνεια του sprite. Διαφορετικά, ενδέχεται να λάβουμε λανθασμένα αποτελέσματα.
#
# Το σημείο που τα sprites συγκρούονται αλλά όχι τα στοιχεία του παιχνιδιού, είναι το πραγματικό σημείο
# όπου η κλάση Sprite θα μπορούσε να βοηθήσει, αφού μπορούμε να τη χρησιμοποιήσουμε με τη μέθοδο
# pygame.sprite.collide_circle().
#
# Αυτή η μέθοδος ανιχνεύει συγκρούσεις μεταξύ των δύο sprites χρησιμοποιώντας κύκλους με κέντρο τις
# επιφάνειές τους.
#
# Ο εντοπισμός μιας σύγκρουσης κύκλων δεν είναι μια πολύ περίπλοκη διαδικασία και μπορούμε να την
# εφαρμόσουμε μόνοι μας.
#
# Δεδομένων αυτών των θεμάτων, γίνεται γρήγορα προφανές ότι η ενσωματωμένη κλάση Sprite του Pygame
# πρόκειται να επαυξηθεί κι όχι απλώς να χρησιμοποιηθεί από μόνη της.
#
# Στην περίπτωση του παιχνιδιού μας, τα Pygame sprites παρέχουν χρήσιμε λειτουργίες. Ίσως θα ήταν
# καλή ιδέα να εφαρμόσουμε μια προσαρμοσμένη κλάση για τα αντικείμενα παιχνιδιού. Αυτό θα μας δώσει
# περισσότερο έλεγχο και θα μας βοηθήσει να κατανοήσουμε ορισμένες έννοιες αφού θα τις εφαρμόσουμε μόνοι
# μας.
#
#
# Κλάση GameObject
# ---
#
# η κλάση αυτή θα ενσωμετώσει κάποια γενική συμπεριφορά και δεδομένα για όλα τα άλλα αντικεόιμενα του
# παιχνιδιού. Οι κλάσεις που αντιπροσωπεύουν συγκεκριμένα αντικείμενα (όπως το διαστημόπλοιο) θα κληρο-
# νομήσουν από αυτή και θα την επεκτείνουν με τη δική τους συμπεριφορά και χαρακτηριστικά.
#
# Η κλάση GameObject θα αποθηκεύσει τα ακόλουθα δεδομένα:
#   - position
#     Ένα σημείο στο κέντρο του αντικειμένου στην οθόνη 2D
#
#   - sprite
#     Μια εικόνα που χρησιμοποιείται για την εμφάνιση του αντικειμένου
#
#   - radius
#     Μια τιμή που αντιπροσωπεύει τη ζώνη σύγκρουσης γύρω από τη θέση του αντικειμένου
#
#   - velocity
#     Μια τιμή που χρησιμοποιείται για κίνηση
#
#
# Εξήγηση
#   Το Sprite είναι μαι επιφάνεια που φορτώθηκε με την load_sprite() ήδη. Το radius είναι ένας ακέραιος
#   αριθμός που υποδεικνύει τον αριθμό των pixel από το κέντρο του αντικειμένου μέχρι την άκρη της ζώνης σύγκρουσης.
#   Ωστόσο, το position όπως και το velocity θα χρειάζονται έναν νέο τύπο αναπαράστασης, ένα διάνυσμα
#
#   Τα διανύσματα είναι παρόμοια με τα tuples. Σε έναν κόσμο 2D (όπως αυτός στο παιχνίδι μας), τα
#   διανύσματα αντιπροσωπεύονται από δύο τιμές που υποδεικνύουν συντεταγμένες x & y.
#
#   Αυτές οι συντεταγμένες μπορούν να δείχνουν μια θέση, αλλά μπορούν επίσης να αντιπροσωπεύουν κινηση
#   ή επιτάχυνση προς μια δεδομένη κατεύθυνση. Τα διανυσματα μπορούν να προστεθούν, να αφαιρεθούν ή
#   ακόμα και να πολλαπλασιαστούν για γρήγορη ενημέρωση της θέσης ενός sprite.
#
#
# Λόγω της χρησιμότητας των διανυσμάτων στα παιχνίδια, το Pygame έχει ήδη μια κλάση για αυτά, τη
# Vector2 στο module pygame.math.
#
# Αυτή η κλάση προσφέρει κάποιες πρόσθετες λειτουργίες, όπως τον υπολογισμό της απόστασης μεταξύ
# των διανυσμάτων και την προσθήκη ή την αφαίρεση διανυσμάτων. Αυτά τα χαρακτηριστικά θα κάνουν τη λογική
# του παιχνιδιού μας πολύ πιο ευκολη στην εφαρμογή.
#
# Ας δημιουργησουμε ένα νέο αρχείο που ονομάζεται models.py. Προς το παρόν, θα αποθηκεύσει την κλάση
# GameObject, αλλά αργότερα θα προσθέσουμε κλάσεις για αστεροειδείς, σφαίρες και το διαστημόπλοιο.
#
#
# Τροποποιούμε το συγκεκριμένο αρχείο από:
# import pygame
# class SpaceRocks:
#     def __init__(self):
#         self._init_pygame()
#         self.screen = pygame.display.set_mode((800, 600))
#         self.background = load_sprite("space", False)

#     def main_loop(self):
#         while True:
#             self._handle_input()
#             self._process_game_logic()
#             self._draw()

#     def _init_pygame(self):
#         pygame.init()
#         pygame.display.set_caption("Space Rocks")

#     def _handle_input(self):
#         for event in pygame.event.get():
#             if event.type == pygame.QUIT or (
#                 event.type == pygame.KEYDOWN and event.key == pygame.K_ESCAPE
#             ):
#                 quit()

#     def _process_game_logic(self):
#         pass

#     def _draw(self):
#         self.screen.fill((0, 0, 255))
#         pygame.display.flip()
#
#
# σε:
# ---
#
# import pygame

# from models import GameObject
# from utils import load_sprite


# class SpaceRocks:
#     def __init__(self):
#         self._init_pygame()
#         self.screen = pygame.display.set_mode((800, 600))
#         self.background = load_sprite("space", False)
#         self.spaceship = GameObject((400, 300), load_sprite("spaceship"), (0, 0))
#         self.asteroid = GameObject((400, 300), load_sprite("asteroid"), (1, 0))

#     def main_loop(self):
#         while True:
#             self._handle_input()
#             self._process_game_logic()
#             self._draw()

#     def _init_pygame(self):
#         pygame.init()
#         pygame.display.set_caption("Space Rocks")

#     def _handle_input(self):
#         for event in pygame.event.get():
#             if event.type == pygame.QUIT or (
#                 event.type == pygame.KEYDOWN and event.key == pygame.K_ESCAPE
#             ):
#                 quit()

#     def _process_game_logic(self):
#         self.spaceship.move()
#         self.asteroid.move()

#     def _draw(self):
#         self.screen.blit(self.background, (0, 0))
#         self.spaceship.draw(self.screen)
#         self.asteroid.draw(self.screen)
#
#
#
# Και τα δύο αντικείμενα τοποθετούνται στη μέση της οθόνης, χρησιμοποιώντας τις συντεταγμένες
# (400, 300). Η θέση και των δύο αντικειμένων θα ενημερώνεται σε κάθε καρέ χρησιμοποιώντας την
# _process_game_logic() και θα σχεδιάζονται χρησιμοποιώντας την _draw().


#
#
# Έλεγχος ταχύτητας
# -----------------
#
# Τώρα που έχουμε κινούμενα αντικείμενα στην οθόνη, ήρθε η ώρα να σκεφτούμε πώς θα αποδώσει το
# παιχνίδι μας σε διαφορετικά μηχανήματα νε διαφορετικούς επεξεργαστές. Μερικές φορές θα τρέχει πιο
# γρήγορα και μερικές φορές πιο αργά.
#
# Εξαιτίας αυτού, οι αστεροειδείς (και οι σφαίρες) θα κινούνται με διαφορετική ταχύτητα, κάνοντας
# το παιχνίδι άλλοτε ευκολότερο και άλλοτε πιο δύσκολο. Δεν είναι και που θέλουμε. Αυτό που θέλουμε
# είναι το παιχνίδι μας να τρέχει με σταθερό αριθμό καρέ ανά δευτερόλεπτο (FPS).
#
# Ευτυχώς η Pygame μπορεί να το φροντίσει αυτό. Διαθέτει τη κλάση Pygame.time.Clock με μια μέθοδο
# tick(). Αυτή η μέθοδος θα περιμένει τόσο ώστε να ταιριάζει με την επιθυμητή τιμή FPS, που μεταβι-
# βάζεται ως όρισμα.
#
# Ενημερώνουμε το αρχείο από:
# import pygame
# class SpaceRocks:
#     def __init__(self):
#         self._init_pygame()
#         self.screen = pygame.display.set_mode((800, 600))
#         self.background = load_sprite("space", False)

#     def main_loop(self):
#         while True:
#             self._handle_input()
#             self._process_game_logic()
#             self._draw()

#     def _init_pygame(self):
#         pygame.init()
#         pygame.display.set_caption("Space Rocks")

#     def _handle_input(self):
#         for event in pygame.event.get():
#             if event.type == pygame.QUIT or (
#                 event.type == pygame.KEYDOWN and event.key == pygame.K_ESCAPE
#             ):
#                 quit()

#     def _process_game_logic(self):
#         pass

#     def _draw(self):
#         self.screen.fill((0, 0, 255))
#         pygame.display.flip()
#
#
# σε:
# ---
#
# import pygame

# from models import GameObject
# from utils import load_sprite


# class SpaceRocks:
#     def __init__(self):
#         self._init_pygame()
#         self.screen = pygame.display.set_mode((800, 600))
#         self.background = load_sprite("space", False)
#         self.clock = pygame.time.Clock()
#         self.spaceship = GameObject((400, 300), load_sprite("spaceship"), (0, 0))
#         self.asteroid = GameObject((400, 300), load_sprite("asteroid"), (1, 0))

#     def main_loop(self):
#         while True:
#             self._handle_input()
#             self._process_game_logic()
#             self._draw()

#     def _init_pygame(self):
#         pygame.init()
#         pygame.display.set_caption("Space Rocks")

#     def _handle_input(self):
#         for event in pygame.event.get():
#             if event.type == pygame.QUIT or (
#                 event.type == pygame.KEYDOWN and event.key == pygame.K_ESCAPE
#             ):
#                 quit()

#     def _process_game_logic(self):
#         self.spaceship.move()
#         self.asteroid.move()

#     def _draw(self):
#         self.screen.blit(self.background, (0, 0))
#         self.spaceship.draw(self.screen)
#         self.asteroid.draw(self.screen)
#         pygame.display.flip()
#         self.clock.tick(60)
#
#
#
# Αν εκτελέσουμε το παιχνίδι μας τώρα, ο αστεροειδείς μπορεί να κινηθεί με διαφορετική
# ταχύτητα από αυτή που είχε αρχικά. Ωστόσο, μπορούμε τώρα να είμαστε σίγουροι ότι αυτή η ταχύτητα
# θα παραμείνει ίδια, ακόμη και σε υπολογιστές με εξαιρετικά γρήγορους επεξεργαστές.
#
# Αυτό συμβαίνει επειδή το παιχνίδι μας θα τρέει πάντα στα 60 FPS. Μπορούμε επίσης να πειραματιστούμε
# με διάφορες τιμές που μπορούμε να βάλουμε στην tick() για να δούμε την διαφορά.
#


#
# Το Διαστημόπλοιό μας
# --------------------
#
# Σε αυτό το σημείο, θα πρέπει να έχουμε μια γενική κλάση για συρόμενα και κινούμενα αντικείμενα στο
# παιχνίδι μας. Στο τέλος αυτού του βήματος θα τη χρησιμοποιήσουμε για να δημιουργήσουμε ένα
# ελεγχόμενο διαστημόπλοιο.
#
# Η κλάση που δημιουργήσαμε στο προηγούμενο βήμα, η GameObject, έχει κάποια γενική λογική που μορεί
# να χρησιμοποιηθεί ξανά από διαφορετικά αντικείμενα του παιχνιδιού. Ωστόσο, κάθε αντικείμενο του
# παιχνιδιού θα εφαρμόσει επίσης τη δική του λογική. Το διαστημόπλοιο, για παράδειγμα, αναμένεται
# να περιστρέφεται και να επιταχύνει.
#
#
# Δημιουργία κλασης:
# Η εικόνα του διαστημόπλοιου βρίσκεται ήδη στα assets. Ωστόσο, νωρίτερα χρησιμοποιήθηκε το κύριο
# αρχείο του παιχνιδιού και τώρα πρέπει να το φορτώσουμε σε ένα απο τα models. Για να μπορέσουμε να
# το κάνουμε αυτό θα μεταβούμε στο models.py.
#
#
#################
#
#
#
# Τα υπόλοιπα, υπάρχουν στα notes στους αντίστοιχους φακέλους
