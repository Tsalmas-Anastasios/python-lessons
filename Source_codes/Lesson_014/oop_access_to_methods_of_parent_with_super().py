# Πρόσβαση σε μεθόδους της γονικής κλάσης χρησιμοποιώντας τη
# super()
#
#
# Εκτός από την αντικατάσταση μεθόδων, μια υποκλάση μπορεί επίσης
# να έχει πρόσβαση και να καλεί μεθόδους από τη γονική κλάση χρησι-
# μοποιώντας την συνάρτηση 'super()'
#
# Αυτό μας επιτρέπει να επαναχρησιμοποιούμε και να επεκτείνουμε τη
# λειτουργικότητα της γονικής κλάσης. Ας τροποποιήσουμε (κάνουμε
# override) τη μέθοδο 'bark()' στην κλάση 'Dog' για να το δείξουμε.

class Animal:
    def __init__(self, name, age):
        self.name = name
        self.age = age
        
    def eat(self):
        print('Animal is eating')
    
    def sleep(self):
        print('The animal is sleeping')

class Dog(Animal):
    def __init__(self, name, age, breed):
        super().__init__(name, age)
        self.breed = breed
    
    def bark(self):
        print('Ο σκύλος γαβγίζει')
        
    def sleep(self):
        print('Ο σκύλος κοιμάται με ανοιχτά τα μάτια')
    
    def bark(self):
       super().sleep()  # Κλήση της μεθόδου της γονικής κλάσης
       print('Ο σκύλος γαβγίζει.')
       
       
# Εδώ μέσα στη μέθοδο 'bark()', χρησιμοποιούμε την 'super().sleep()' για να 
# καλέσουμε τη μέθοδο 'sleep()' από την κλάση 'Animal'. Αυτό μας επιτρέπει
# να εκτελέσουμε τη συμπεριφορά της γονικής κλάσης πριν προσθέσουμε επιπλέον
# λειτουργικότητα που είναι συγκεκριμένη για την κλάση 'Dog'.