# Πολλαπλή κληρονομικότητα
#
#
# Επιπλέον, η Python υποστηρίζει την πολλαπλή κληρονομικότητα, που επιτρέπει
# σε μια κλάση να κληρονομεί από πολλές γονικές κλάσεις. Αυτό σημαίνει ότι μια
# υποκλάση μπορεί να παραλαμβάνει χαρακτηριστικά και μεθόδους από πολλές πηγές.
#
# Αν και μπορεί να είναι ένα ισχυρό εργαλείο, πρέπει να χρησιμοποιείται προσε-
# κτικά για να διατηρηθεί η σαφήνεια του κώδικα και να αποφεύγονται πιθανές
# συγκρούσεις.
#
# Ωστόσο, λόγω της πολυπλοκότητας που συνεπάγεται η πολλαπλή κληρονομικότητα
# δεν θα εμβαθύνουμε περισσότερο σε αυτήν σε αυτό το εισαγωγικό μάθημα.
#
# Απλά ας γνωρίζουμε ότι υπάρχει ως ένα προηγμένο θέμα που μπορούμε να 
# διερευνήσουμε στο μέλλον.
#
# Ένα παράδειγμα:

# Κλάση γονέας 1
class Animal:
    def __init__(self, name):
        self.name = name
        
    def eat(self):
        print(f'O {self.name} τρώει')
        
# Κλάση γονέας 2
class CanFly:
    def fly(self):
        print(f'O {self.name} πετάει')


# Κλάση παιδί που κληρονομεί από τις κλάσεις Animal και CanFly
class Bird(Animal, CanFly):
    def __init__(self, name):
        # Καλούμε τους κατασκευαστές των γονικών κλάσεων
        Animal.__init__(self, name)
        CanFly.__init__(self)


bird = Bird('Σπουργίτης')
bird.eat()
bird.fly()


# Σε αυτό το παράδειγμα, έχουμε τρεις κλάσεις: 'Animal', 'CanFly' και
# 'Bird'
#
# Η κλάση 'Animal' αναπαριστά ένα ζώο και έχει μία μέθοδο '__init__' που
# αρχικοποιεί το χαρακτηριστικό 'name' και μία μέθοδο 'eat'.
#
# Η κλάση 'CanFly' αναπαριστά την ικανότητα να πετάει και έχει μια μέθοδο 'fly'
#
# Η κλάση 'Bird' είναι μια παιδική κλάση που κληρονομεί και από τις δύο κλάσεις,
# 'Animal' και 'CanFly'. Έχει μια μέθοδο '__init__' που καλεί τους κατασκευαστές
# και των δύο γονικών κλάσεων. Αυτό της επιτρέπει να κληρονομήσει τα χαρακτηριστικά
# και τις μεθόδους και από τις δύο κλάσεις.
#
# Σε αυτό το παράδειγμα, δημιουργούμε μια έκδοση της κλάσης 'Bird' που ονομάζεται
# 'bird' και δίνουμε το όνομα 'Σπουργίτης' ως όρισμα στον κατασκευαστή της.
#
# Στη συνέχεια, καλούμε τη μέθοδο 'eat' στο αντκείμενο 'bird', η οποία εκτυπώνει το
# μήνυμα 'O Σπουργίτης τρώει'.
#
# Στη συνέχεια, καλούμε τη μέθοδο 'fly' στο αντικείμενο 'bird', η οποία εκτυπώνει το
# μήνυμα 'Ο Σπυργίτης πετάει'.
#
# Η κλάση 'Bird' μπορεί να έχει πρόσβαση και να χρησιμοποιήσει τόσο τη μέθοδο 'eat'
# από την κλάση 'Animal', όσο και τη μέθοδο 'fly' από την κλάση 'CanFly' χάρη στην
# πολλαπλή κληρονομικότητα.
#
#
#
# Συμπεράσματα:
# -------------
# Σε αυτήν την ενότητα, μάθαμε για την κληρονομικότητα, που μας επιτρέπει να
# δημιουργήσουμε υποκλάσεις που κληρονομούν χαρακτηριστικά και μεθόδους από
# γονικές κλάσεις. Εξερευνήσαμε τη δημιουργία υποκλάσεων, τηυν αντικατάσταση
# μεθόδων και την πρόσβαση σε μεθόδους γονικής κλάσης χρησιμοποιώντας το
# super().