# Προηγμένα θέματα κλάσεν
#
#
# Ας δούμε κάποια προηγμένα θέματα που σχετίζονται με τις κλάσεις στην Python.
#
# Θα δούμε τις μεταβλητές κλάσης, την ενθυλάκωση (encapsulation) και τον 
# πολυμορφισμό. Αυτές οι έννοιες θα ενισχύσουν ακόμα περισσότερο την κατανόησή
# μας για τον αντικειμενοστραφή προγραμματισμό. Let's start!
#
#
# Μετβαλητές κλάσης
# -----------------
# α. Οι μεταβλητές κλάσης κοινοποιούνται μεταξύ όλων των περιπτώσεων μιας κλάσης.
# β. Ορίζονται εντός της κλάσης, αλλά έξω από κάθε μέθοδο.
# γ. Οι μεταβλητές κλάσης προσπελαύνονται χρησιμοποιώντας το όνομα της κλάσης ή
#    τα αντικείμενα της κλάσης.
#
#
# Ενθυλάκωση και Μεταβλητές Πρόσβασης
# -----------------------------------
# α. Η ενθυλάκωση (encaposulation) είναι μια πρακτική της συσκευασίας δεδομένων
#    και μεθόδων εντός μιας κλάσης
# β. Οι μεταβλητές πρόσβασης ελέγχουν την ορατότητα και την προσβασιμότητα των
#    μελών μιας κλάσης.
# γ. Η Python χρησιμοποιεί συμβάσεις ονομασίας για να υποδηλώνει επίπεδα πρόσβασης:
#       - Δημόσια μέλη: Καμία σύμβαση ονομασίας (προσπελάσιμα από οπουδήποτε)
#       - Προστατευμένα μέλη: Ξεκινούν με ένα underscore (σύμβαση, δεν επιβάλλεται)
#       - Ιδιωτικά μέλη: Ξεκινούν με διπλό underscore, δηλαδή dunder (ονοματοποίηση
#                        ονομάτων - name mangling)
#
#
#
# Παράδειγμα

# Δημιουργία μιας κλάσης με όνομα 'Person'
class Person:
    def __init__(self, name, age):
        self.name = name
        self.__age = age            # Ενθυλακωμένη μεταβλητή
    
    def display_info(self):
        print('Όνομα: ', self.name)
        print('Ηλικία: ', self.__age)
        

# Δημιουργία ενός αντικειμένου της κλάσης 'Person'
person = Person('Γιάννης', 25)

# Πρόσβαση στη συνδεδεμένη μεταβλητή έμμεσα χρησιμοποιώντας μια μέθοδο της κλάσης
person.display_info()


#
# - Δημιουργούμε μια κλάση με το όνομα 'Person', η οποία αναπαριστά ένα άτομο
#   και έχει δύο χαρακτηριστικά: 'name' και '__age'
# - Γνωρίζουμε ότι η μέθοδος '__init__' είναι μια ειδική μέθοδος (κατασκευαστής)
#   που καλείται όταν δημιουργούμε ένα αντικείμενο της κλάσης. Παίρνει τα 'name'
#   και 'age' ως παραμέτρους και τα αναθέτει στα αντίστοιχα χαρακτηριστικά του
#   αντικειμένου.
# - Το χαρακτηριστικό '__age' είναι συνδεδεμένο χρησιμοποιώντας διπλή υπογράμμιση
#   ('__') στην αρχή του ονόματός του. Αυτή η συνήθεια στην Python υποδηλώνει ότι
#   το χαρακτηριστικό προορίζεται να είναι ιδιωτικό και δεν πρέπει να προσπελάυνεται
#   απευθείας από έξω της κλάσης.
# - Ορίζουμε μια μέθοδο με το όνομα 'display_info' που εκτυπώνει το όνομα και την 
#   ηλικία του ατόμου
# - Στη μέθοδο 'display_info', μπορούμε να αποκτήσουμε πρόσβαση στην ενθυλακωμένη
#   μεταβλητή '__age' απευθείας επειδή βρισκόμαστε μέσα στην κλάση.
# - Δημιουργούμε ένα αντικείμενο 'person' της κλάσης 'Person' περνώντας τις τιμές
#   'Γιάννης' και 25 ως ορίσματα στον κατασκευαστή (__init__)
# - Τέλος, καλούμε τη μέθοδο 'display_info' στο αντικείμενο 'person' για να εκτυπω-
#   θούν οι πληροφορίες του ατόμου.
#
#
#
# Πολυμορφισμός και Υπερφόρτωση Μεθόδων
# -------------------------------------
# α. Ο πολυμορφισμός επιτρέπει τη χρήση αντικειμένων από διάφορες κλάσεις με αντα-
#    λλάξιμο τρόπο
# β. Η υπερφόρτωση μεθόδων είναι η δυνατότητα ορισμού πολλαπλών μεθόδων με το ίδιο
#    όνομα, αλλά διαφορετικές παραμέτρους.
# γ. Στην Python, η υπερφόρτωση μεθόδων επιτυγχάνεται μέσω προεπιλεγμένων παραμέτρων
#    και '*args' ή '**kwargs'.