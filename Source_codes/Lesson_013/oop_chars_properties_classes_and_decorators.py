# Ιδιότητες (Properties) στις Κλάσεις της Python
#
# Στην Python, οι κλάσεις είναι σαν σχέδια για τη δημιουργία αντικειμένω.
# Σκεφτείτε μια κλάση σαν ένα πρότυπο που ορίζει πώς θα μοιάζει και θα
# συμπεριφέρεται ένα αντικείμενο.
#
# Οι ιδιότητες στις κλάσεις μας επιτρέπουν να ορίσουμε χαρακτηριστικά
# μεταβλητές που ανήκουν σε ένα αντικείμενο.
#
# Ας θεωρήσουμε μια κλάση με το όνομα "Car" (Αυτοκίνητο). Ένα αυτοκίνητο
# έχει διάφορες ιδιότητες, όπως το χρώμα, η μάρκα και η ταχύτητα. Μπορούμε
# ορίσουμε αυτές τις ιδιότητες μέσα στην κλάση.
#
# Για παράδειγμα:
class Car:
    def __init__(self, color, brand):
        self.color = color
        self.brand = brand
        

# Δημιουργία αντικειμένου της κλάσης Car
my_car = Car('Red', 'Toyota')

# Πρόσβαση στις ιδιότητες του αυτοκινήτου
print(my_car.color)             # Print --> Red
print(my_car.brand)             # Print --> Toyota


# Σε αυτό το παράδειγμα, η κλάση 'Car' έχει δύο ιδιότητες:
# 'color' (χρώμα) και 'brand' (μάρκα). Όταν δημιουργούμε
# ένα αντικείμενο ('my_car') της κλάσης 'Car', μπορούμε να
# αντιστοιχίσουμε τιμές σε αυτές τις ιδιότητες.
# Έπειτα, μπορούμε να αποκτήσουμε πρόσβαση στις ιδιότητες χρησιμοποιώντας
# την σύνταξη της τελείας ('αντικείμενο.ιδιότητα').
#
#
#
# Διακοσμητές (Decorators) στις Κλάσεις της Python
# ------------------------------------------------
# Στην Python, οι decorators είναι ειδικές συναρτήσεις που τροποποιούν τη
# συμπεριφορά άλλων συναρτήσεων ή μεθόδων. Μας επιτρέπουν να προσθέσουμε
# λειτουργικότητα σε μια κλάση ή τις μεθόδους της χωρίς να αλλάξουμε τον
# αρχικό τους κώδικα.
#
# Ας υποθέσουμε ότι έχουμε μια κλάση με το όνομα 'MathOperations' (Μαθηματικές
# Λειτουργίες), και θέλουμε να προσθέσουμε έναν decorator στη μέθοδο 'add_numbers'
# (προσθήκη αριθμών)
#
# Ο decorator θα εκτυπώσει ένα μήνυμα πριν και μετά την εκτέλεση της μεθόδου:
#
# Παράδειγμα:
def decorator(func):
    def wrapper(*args, **kwargs):
        print("Πριν την εκτέλεση της μεθόδου")
        result = func(*args, **kwargs)
        print("Μετά την εκτέλεση της μεθόδου")
        return result
    return wrapper


class MathOperations:
    @decorator
    def add_numbers(self, x, y):
        return x + y
    


# Δημιουργία αντικειμένου της κλάσης MathOperations
math_obj = MathOperations()

# Κλήση της μεθόδου add_numbers
result = math_obj.add_numbers(2, 3)


# Σε αυτό το παράδειγμα, ορίσαμε μια συνάρτηση 'decorator' που παίρνει μια
# συνάρτηση 'func' ως όρισμα. Μέσα στον decorator, ορίζουμε μια συνάρτηση - 
# περιτύλιγμα ('wrapper') που προσθέτει επιπλέον λειτουργικότητα πριν και
# μετά την κλήση της αρχικής συνάρτησης. Η σύνταξη '@decorator' χρησιμοποι-
# είται για να εφαρμόσουμε τον decorator στη μέθοδο 'add_number' στην κλάση
# 'MathOperations'.
#
# Σε αυτή την περίπτωση, ο decorator δεν αλλάζει τη λειτουργικότητα της μεθόδου
# αλλά προσθέτει επιπλέον λειτουργικότητα.