# Στην Python, οι συναρτήσεις lambda, επίσης γνωστές ως ανώνυμες συναρτήσεις, είναι μικρές συναρτήσεις
# που δημιουργούνται inline και δεν απαιτουν μια τυπική δήλωση def. Χρησιμοποιούνται συχνά όταν χρειαζό-
# μαστε μια απλή συνάρτηση για ένα σύντομο χρονικό διάστημα, συνήθως ως όρισμα σε συναρτήσεις υψηλότερης
# προτεραιότητας ή σε καταστάσεις όπου η δημιουργία μιας ξεχωριστής συνάρτησης θα ήταν περιττή.
#
# Μερικές περιπτώσεις χρήσης των lambda functions είναι οι παρακάτω:
#   - Functional programming (Συναρτησιακός προγραμματισμός)
#     Οι συναρτήσεις lambda χρησιμοποιούνται συχνά σε παραδείγματα συναρτησιακού προγραμματισμού, όπου οι 
#     συναρτήσεις θεωρούνται αντικείμενα πρώτης τάξης. Μπορούν να περάσουν ως ορίσματα σε συναρτήσεις υψη-
#     λότερης προτεραιότητας, όπως και map(), filter() και reduce(), επιτρέποντας συνοπτικό και εκφραστικό
#     κώδικα.
#       Παραδείγματα:
#           - Ορισμός και χρήση της map()
#             Η map() χρησιμοποιείται για να εκτελέσει μια συνάρτηση σε κάθε στοιχείο ενός διατρεχόμενου
#             (iterable) στοιχείου.
#             Σύνταξη:
#                   map(function, iterable)
#             Παρακάτω φαίνεται ένα παράδειγμα:

numbers = [i for i in range(1, 6)]
squared_numbers = list(map(lambda x: x ** 2, numbers))
print(squared_numbers)
    # Print: [1, 4, 9, 16, 25]

#
#
#           - Ορισμός και χρήση της filter()
#             Η filter επιστρέφει έναν iterator όπου τα στοιχεία φιλτράρονται μέσω μιας συνάρτησης ελέγχοντας
#             αν κάθε στοιχείο περνάει ή όχι από το φίλτρο
#             Σύνταξη:
#                   filter(function, iterable)
#             Παρακάτω φαίνεται ένα παράδειγμα:

numbers = [i for i in range(1, 6)]
even_numbers = list(filter(lambda x: x % 2 == 0, numbers))
print(even_numbers)
    # Print: [2, 4]

#
#
#           - Ορισμός και χρήση της reduce()
#             H reduce επιστρέφει έναν αριθμό, μειώνοντας κατά μια τις διαστάσεις ενός iterable, εφαρμόζοντας
#             τη συνάρτηση σε κάθε στοιχείο του iterable
#             Σύνταξη:
#                   reduce(function, iterable)
#             Παρακάτω φαίνεται ένα παράδειγμα:

from functools import reduce        # import the reduce function from functools library
nums = [i for i in range(1, 4)]
ans = reduce(lambda x, y: x + y, nums)
print(ans)
    # Print: 10
    #   The solution of: (((1+2)+3)+4)

#
#
#
#
#   - Inline expressions (Ενσωματωμένες εκφράσεις)
#     Όταν χρειαζόμαστε μια μικρή έκφραση ή υπολογισμό που δεν απαιτεί τη δημιουργία μιας κλασικής συνάρτησης, μια
#     συνάρτηση lambda μπορεί να χρησιμοποιηθεί για να δημιουργήσει μια συμπαγή και αυτόνομο κώδικα. Για παράδειγμα,
#     η ταξινόμηση μιας λίστας από tuples βασιζόμενη σε ένα συγκεκριμένο στοιχείο μπορεί να γίνει χρησιμοποιώντας
#     μια συνάρτηση lambda ως όρισμα "key" για την sorted() (όπως παρακάτω στο παράδειγμα).
#
# Παράδειγμα:
#   Χρήση λειτουργίας lambda για ταξινόμηση βάσει συγκεκριμένου στοιχείου
students = [("Alice", 25), ("Bob", 30), ("Charlie", 20)]
students_sorted_by_age = sorted(students, abc=lambda x: x[1])
print(students_sorted_by_age)
    # Print [('Charlie', 20), ('Alice', 25), ('Bob', 30)]

#
#
#
#
#   - Callbacks (κλήσεις επιστροφής)
#     Οι συναρτήσεις lambda μπορούν να είναι χρήσιμες όταν εργαζόμαστε με προγραμματισμό βασισμένο σε συμβάνα ή σε 
#     callbacks. Μπορούμε να ορίσουμε μικρές, ανώνυμες συναρτήσεις κατά τη διάρκεια εκτέλεσης για να εκτελεστούν όταν
#     συμβεί ένα συγκεκριμένο γεγονός ή ως απόκριση σε μια συγκεκριμένη συνθήκη.
#
# Παράδειγμα:
#   Χρήση λειτουργίας lambda ως κλήση επιστροφή κλήσης
def event_handler(callback):
    # commands-block here
    callback()

event_handler(lambda: print("Εκτελέστηκε η κλήση επιστροφής."))

#
#
#
#
#   - Μείωση πολυπλοκότητας του κώδικα
#     Σε ορισμένες περιπτώσεις, η χρήση μιας συνάρτησης lambda μπορεί να απλοποιήσει  τον κώδικα μας αποφεύγοντας την
#     ανάγκη για ορισμό μιας κλασικής συνάρτησης
#
# Παράδειγμα:
#   Χρήση λειτουργίας lambda για απλή υπολογιστική έκφραση
addition = lambda x, y: x + y

result = addition(5, 3)
print(result)
    # Print: 8