# To multithreading (πολυνηματικότητα) είναι μια ιδεά η οποία μας επιτρέπει να εκτελούμε πολλές
# διεργασίες ταυτόχρονα σε ένα πρόγραμμα Python. Σκεφτείτε το multithreading σαν να έχουμε πολλά
# threads που τρέχουν παράλληλα στο πρόγραμμά μας.
#
# Στην κανονική ροή εκτέλεσης ενός προγράμματος Python. οι εντολές εκτελούνται μία-μία κατά σειρά.
# Αυτό σημαίνει ότι πρέπει να περιμένουμε μέχρι να ολοκληρωθεί μια εντολή προτού ξεκινήσει η
# επόμενη. Με το multithreading, μπορούμε να ξεκινήσουμε πολλές εντολές ταυτόχρονα και να τις
# εκτελέσουμε παράλληλα.
#
# Για να χρησιμοποιήσουμε multithreading σε ένα πρόγραμμα Python, πρέπει να χρησιμοποιήσουμε την
# βιβλιοθήκη 'threading' (import threading). Με αυτή τη βιβλιοθήκη, μπορούμε να δημιουργήσουμε
# threads και να τα εκτελέσουμε ταυτόχρονα.
#
# Ένα παράδειγμα χρήσης του multithreading μπορεί να είναι όταν έχουμε ένα μακροχρόνιο έργο που δεν
# θέλουμε να παρακωλύει την εκτέλεση του υπόλοιπου προγράμματος. Μπορούμε να δημιουργήσουμε ένα 
# thread για το μακροχρόνιο έργο και να συνεχίσουμε την εκτέλεση του κύριου προγράμματος. Έτσι, το
# πρόγραμμά μας μπορεί να εκτελεί πολλές εργασίες ταυτόχρονα, βελτιώνοντας έτσι την απόδοση και την 
# αποκρισιμότητά του.
#
# Ωστόσο, πρέπει να είμαστε προσεκτικοί όταν χρησιμοποιούμε multithreading. Αν δεν διαχειριστούμε σωστά
# την κοινή πρόσβαση σε κοινούς πόρους, όπως μεταβλητές, μπορούν να προκύψουν προβλήματα ασυνέπειας
# δεδομένων. Πρέπει να εξασφαλίσουμε ότι τα threads διαχειρίζονται σωστά την κοινή πρόσβαση σε δεδομένα,
# χρησιμοποιώντας μηχανισμούς όπως τα κλειδώματα (locks) και οι συνθήκες (conditions).
#
# Συνοψίζοντας, το multithreading επιτρέπει σε ένα πρόγραμμα Python να εκτελεί πολλαπλές διεργασίες
# ταυτόχρονα, βελτιώνοντας την απόδοση και την αποκρισιμότητά του. Χρησμιμοποιούμε την βιβλιοθήκη
# 'threading' για να δημιουργήσουμε και να ελέγξουμε τα threads. Πρέπει να είμαστε προσεκτικοί κατά την
# χρήση του multithreading για να αποφύγουμε προβλήματα ασυνέπειας δεδομένων.
#
#

# Παράδειγμα single thread
#
#   Παράδειγμα εκτέλεσης προγράμματος χωρίς multithreading

import time                 # time library

list_size = 500             # δημιουργία μεταβλητής μεγέθους λίστας
list_of_ints = []           # δημιουργία μεταβλητής λίστας

for i in range(0, (list_size + 1)):             # γέμισμα λίστας
    list_of_ints.append(i)


def single_print():                         # συνάρτηση εκτύπωσης λίστας σε ένα thread
    for k in range(int(list_size + 1)):
        print(list_of_ints[k])


singlethread_start_time = time.time()       # αρχή καταμέτρησης χρόνου
    # time.time() -->  current time

single_print()          # εκτύπωση

singlethread_end_time = time.time()         # τέλος καταμέτρησης χρόνου

singlethread_final_time = singlethread_end_time - singlethread_start_time       # Υπολογισμός χρόνου εκτέλεσης

print(f"\nΧρόνος εκτέλεσης συνάρτησης single thread: {singlethread_final_time}")



# Παράδειγμα multithread
#
#   Παράδειγμα εκτέλεσης προγράμματος με multithreading
import time
import threading as th              # import library as alias

list_size = 500             # δημιουργία μεταβλητής μεγέθους λίστας
my_list = []                # δημιουργία μεταβλητής λίστας

for i in range(1, (list_size + 1)):             # γέμισμα λίστας
    my_list.append(i)



def multi_print(offset, max_value):             # συνάρτηση εκτύπωσης λίστας με παραμέτρους στη range()
    # offset = το τέλος του προηγούμενου thread
    # max_value = το τέλος του τρέχοντος thread

    for k in range((0 + offset), max_value):            # εκτύπωση συγκεκριμένων κομματιών της λίστας
        print(f"{my_list[k]}")



# δημιουργία 4 threads (νημάτων) με ονόματα t1, t2, t3, t4 και με παραμέτρους:
#   target = είναι η συνάρτηση που θέλουμε να εκτελεί το thread
#   args = τα ορίσματα που θέλουμε να περάσει το thread στη συνάρτηση
t1 = th.Thread(target = multi_print, args = (0, 125))
t2 = th.Thread(target = multi_print, args = (125, 250))
t3 = th.Thread(target = multi_print, args = (250, 375))
t4 = th.Thread(target = multi_print, args = (375, 500))

start = time.time()         # έναρξη καταμέτρησης χρόνου


# χωρίς start() δεν ξεκινούν τα threads
# εκκίνηση των threads:
t1.start()
t2.start()
t3.start()
t4.start()


# αναμονή εκτέλεσης των threads για συνέχεια του προγράμματος και
# ολοκλήρωση των threads πριν το τέλος του προγράμματος
t1.join()
t2.join()
t3.join()
t4.join()

end = time.time()               # τέλος καταμέτρησης χρόνου

print(f'Thread time: {end - start}')