# το iterable (διατρέξιμο) μπορεί να είναι οποιοδήποτε αντικείμενο μέσα στο
# οποίο μπορεί να "τρέξει" ένας βρόχος, όπως μια λίστα, ένα tuple, ένα set κ.λ.π
#
# μπορούμε να χρησιμοποιήσουμε τη συνάρτηση range() για να δημιουργήσουμε ένα
# iterable:
newlist = [x for x in range(10)]
    # δημιουργήσαμε μία λίστα η οποία περιέχει του αριθμούς 0 έως και 9 και
    # της έχουμε δώσει και όνομα σε μια και μόνο γραμμή κώδικα.
    # διαφορετικά, αν δεν υπήρχε αυτός ο τρόπος σύνταξης, θα γράφαμε:
    #   newlist = []
    #   for i in range(10)
    #       newlist.append(i)
    #
    # με αυτόν τον τρόπο σύνταξης θα είχαμε 2 παραπάνω γραμμές (στην πιο βέλτιστη
    # περίπτωση)

# Παράδειγμα Νο. 1
# για παράδειγμα έστω ότι θέλουμε να δημιουργήσουμε μία λίστα η οποία να περιλαμβάνει
# μόνο τους ζυγούς αριθμούς από το εύρος 0 έως και 9. Θα χρησιμοποιήσουμε και τους δύο
# τρόπους σύνταξης, δηλαδή:
#
# 1ος τρόπος: κλασικός τρόπος
list = []
for i in range(10):
    if i % 2 == 0:
        list.append(i)
#
# 2ος τρόπος: iterable
list = [i for i in range(10) if i % 2 == 0]
    # φαίνεται ξεκάθαρα η διαφορά των 2 αυτών τρόπων σύνταξης.
    # ο τρόπος των iterable, συνίσταται κατά την δημιουργία μικρών ή μεγάλων
    # αρχείων


# Παράδειγμα Νο. 2
# έστω ότι θέλουμε να μετατρέψουμε τα στοιχεία της νέας λίστας σε κεφαλαία
fruits = ['apple', 'banana', 'cherry', 'kiwi', 'mango']
newlist = [x.upper() for x in fruits]
print(newlist)

# Παράδειγμα Νο. 3
# θέλουμε να αντικαταστήσουμε όλες τις τιμές της λίστας fruits με την τιμή 'hello'
fruits = ['apple', 'banana', 'cherry', 'kiwi', 'mango']
newlist = ['hello' for x in fruits]
    # η κάθε δήλωση, μπορεί επίσης να περιέχει συνθήκες, όχι σαν ένα φίλτρο,
    # αλλά σαν ένα τρόπο να διαχειριστούμε το αποτέλεσμα της εξόδου
print(newlist)

# Παράδειγμα Νο. 4
# Να δημιουργηθεί μία νέα λίστα με βάσει την αρχική λίστα fruits, όπου θα αντικατα-
# σταθεί το όρασμα 'banana' με το όρισμα 'orange'
fruits = ['apple', 'banana', 'cherry', 'kiwi', 'mango']
newlist = [x if x != 'banana' else 'orange' for x in fruits]
    # η έκφραση [x if x != 'banana' else 'orange' for x in fruits], ουσιαστικά σημαίνει:
    # Επίστρεψε κάθε φρούτο αν δεν είναι 'banana', όμως αν είναι 'banana', επίστρεψε
    # πορτοκάλι
print(newlist)

# Παράδειγμα Νο. 5
# Φτιάξτε μία λίστα η οποία να τυπώνει όλα τα τετράγωνα των αριθμών από το 1 μέχρι το 9
newlist = [i ** 2 for i in range(1,10)]
print(newlist)

# Παράδειγμα Νο. 6
# Να φτιάξετε μία συνάρτηση η οποία μας επιστρέφει μόνο τις μεγάλες λέξεις από μια
# λίστα με λέξεις. Μπορούμε να πούμε πως οποιαδήποτε λέξη μεγαλύτερη από 7 χαρακτήρες
# είναι μια μεγάλη λέξη. Να γίνει και με τον κλασικό τρόπο αλλά και με iterable
#
# 1ος τρόπος: κλασικός τρόπος
def long_words_classic(lst):
    words = []
    for word in lst:
        if len(word) > 7:
            words.append(word)
    return words

# 2ος τρόπος: iterable
def long_words_iterable(lst):
    return [word for word in lst if len(word) > 7]

    # όπως μπορούμε να παρατηρήσουμε, το πλήθος εντολών από τον 1ο τρόπο στον 2ο
    # μειώθηκε κατά 4 εντολές. Δηλαδή, η πρώτη συνάρτηση περιείχε 5 εντολές, ενώ η
    # δεύτερη περιείχε μόνο μία εντολή (return ...)
    #
    # για τον λόγο αυτό προτιμάται η δεύτερη σύνταξη κατά την συγγραφή ενός project
    #
    # αυτό παρέχει:
    #   - ευκολία στην ανάγνωση
    #   - ευκολία στην διόρθωση
    #   - ευκολία στην ευρετηρίαση