# Python alarm clock
#
#
# Προαπαιτούμενα
# --------------
#
# Αυτό το έργο απαιτεί καλή γνώση της Python καθώς και της δημιουργίας
# GUI (Graphin User Interface). H Python όταν συνδυάζεται με το Tkinter
# καιακόμα καλύτερα με το ttkbootstrap, παρέχει έναν γρήγορο καθώς και
# εύκολο τρόπο δηιουργίας εφαρμογών GUI.
#
# Το Tkinter με το ttkbootstrap παρέχουν όμορφες και εύκολα παραμετρο-
# ποιήσιμες γραφικές διεπαφές χρήστη.
#
# Δεν χρειάζεται να κατεβάσουμε ή να χρησιμοποιήσουμε κάτιπου δεν έχει
# ενσωματωμέο η Python όμως, πρέπει να αφιερώσουμε ελάχιστο χρόνο για να
# δούμε βιβλιοθήκες συνεργασίας της γλώσσας με το λειτουργικό σύστημα,
# όπως τις date, datetime και windsound τις οποίες εισάγουμε στην αρχή
# του project.
#
#
# Δομή έργου
# ----------
#
# Κάθε έργο μας, από αυτό το μέγεθος και πάνω, θα πρέπει να έχει μια δομή
# ώστε το "νοητικό μας κατασκεύασμα", να αρχίσει να παίρνει μορφή.
#
# Αρχικά, ας ελέγξουμε τα βήματα για τη δημιουργία ενός προγράμματος
# Ξυπνητήρι στην Python:
#       - Εισαγωγή όλων των βιβλιοθηκών και ενοτήτων που απαιτούνται
#       - Ένας βρόχος while που παίρνει το όρισμα της ώρας στην οποία ο
#         χρήστης θέλει να βάλει το ξυπνητήρι να χτυπήσει και διακόπτεται
#         αυτόματα όταν αυτή η ώρα φτάσει, με ήχο
#       - Γραφικό περιβάλλον με το ttkbootstrap
#
#
#
# Καταστκευή - Περγραφή - Σχόλια
#
#

# Ξεκινάμε με την κατασκευή του προγράμματός μας με την εισαγωγή των
# απαραίτητων βιβλιοθηκών:
from tkinter import *
import ttkbootstrap as ttk
from ttkbootstrap.constants import *

# themes = cosmo, flaty, journal, litera, lumen, minty, pulse, sandstone
# united, yeti, morph, simplex, cerculean

import datetime
import time
import winsound

# Εισάγουμε τα πάντα από το Tkinter, καθώς και το ttkbootstrap με τις σταθερές
# του (SUCCESS, LEFT, κλπ)
#
# Τα modules datetime και time μας βοηθούν να εργασστούμε με τις ημερομηνίες
# και την ώρα της τρέχουσας ημέρας στην οποία ο χρήστης θα χρειαστεί το
# ξυπνητήρι.
# Τo module winsound παρέχει πρόσβαση στη χρήση βιβλιοθηκών ήχου των Windows.
# Αυτό θα μας είναι χρήσιμο για το "χτύπημα του ξυπνητηριού" μόλις ικανοποι-
# ηθεί η συνθήκη και κληθεί η συνάρτησή μας.
#

# Βρόχος while - η "μηχανή" του ξυπνητηριού
# -----------------------------------------
#
# Πάμε να δούμε πως θα υλοποιήσουμε το ξυπνητήρι μας. Μπορούμε να σκεφτούμε:
# Όσο ο χρόνος μετράει και πλησιάζει τον χρόνο αφύπνισης, μην κάνεις τίπου.
# Όταν ο χρρόνος της αφύπνισης, γίνει ίσος με τον χρόνο του τώρα, (της στιγμής),
# χτύπα το κυπνητήρι.
#
# Δηλαδή τύπωσε ένα μήνυμα και κάλεσε τον ήχο του ξυπνητηριού.
#
# Για να τα κάνουμε όλα αυτά χρειάζεται να παίρνουμε τον χρόνο του τώρα και μπορούμε
# επίσης, για να έχουμε έναν έλεγχο του τι συμβαίνει, να τυπώνουμε τον χρόνο,
# παρατηρώντας ότι πλησιάζει τονν χρόνο αφύπνισης. Έτσι, μπορούμε και εύκολα να
# αποσφαλματώσουμε το προγραμματάκι μας:
#


def alarm(set_alarm_timer):  # Η παράμετρος εισάγεται από την actual_time()
    while True:  # Όσο δεν συμβαίνει τίποτα, τύπωνε στην κονσόλα την ημ/νία και την ώρα
        time.sleep(1)  # ο χρόνος θα μετράει με καθυστέρηση ενός δευτ/του
        current_time = datetime.datetime.now()
        now = current_time.strftime("%H:%M:%S")
        date = current_time.strftime("%d/ %m / %Y")
        print('Η ημερομηνία είναι", date')  # Εκτπυώση στην κονσόλα (IDLE)
        print(now)  # Εκτύπωση στην κονσόλα (IDLE)
        if (
            now == set_alarm_timer
        ):  # Όταν η ώρα γίνει ίση με την ώρα που έχει ορίσει ο χρήστης
            print("Ώρα να ξυπνήσεις!")  # τύπωσε μήνυμα στην κονσόλα
            # winsound.PlaySound("sound.wav", winsound.SND_ASYNC)
            # Εδώ έχουμε έναν κλασικό ήχο των Windows
            winsound.PlaySound(
                "./mixkit-retro-game-emergency-alarm-1000.wav", winsound.SND_FILENAME
            )
            # και κάλεσε τον ήχο του ξυπνητηριού (ήχος που έχουμε κατεβάσει)
            break


#
# Βέβαια, παρατηρούμε ότι η παράμετρος set_alarm_timer εισήχθη από την active_alarm την
# και πρέπει να δημιουργήσουμε:
#


def activate_alarm():  # Παίρνει τον χρόννο αφύπνισης και "καλεί" τη "μηχχανή" που θα
    # χτυπήσει το ξυπνητήρι
    set_alarm_timer = f"{hour.get()}:{min.get()}:{sec.get}"
    alarm(set_alarm_timer)  # Κλήση της μηχανής του ξυπνητηριού


#
# Δημιουργία γραφικού περιβάλλοντος
# ---------------------------------
#
# Έχουμε αναφερθεί σ' αυτό το κομμάτι στα προηγούμενα μαθήματα στα οποία
# και μπορείτε να ανατρέξετε. Μια εύκολη παραλλαγή του GUI, μπορούμε να
# δημιουργήσοουμε απλά αλλάζοντας το themename (όλες οι ονομασίες που μπορούμε
# να χρησιμοποιήσουμε, παρέχονται για ευκολία στα σχόλια)
#

# Δημιουργία γραφικού περιβάλλοντος
clock = ttk.Window(themename="cerculean")
clock.title("Python Alarm Clock")
# clock.iconbitmap(r"python.ico")  # Μπορούμε να βάλουμε το δικό μας εικοννίδιο στο παράθυρο
clock.geometry("400x200")

time_format = ttk.tk.Label(
    clock,
    text="Εισάγετε την ώρα σε 24ωρη βάση",
    font=("Helvetica", 15),
    bootstyle=PRIMARY,
).pack(side=TOP, padx=5, pady=5)

addTime = ttk.tk.Label(
    clock, text="Ώρα Λεπτά Δευτερόλεπτα", font=("Helvetica", 10), bootstyle=SECONDARY
).pack(side=BOTTOM, padx=5, pady=5)

setYourALarm = ttk.tk.Label(
    clock, text="Να ξυπνήσω στις...", font=("Heelvetica", 10), bootstyle=SECONDARY
).pack(side=BOTTOM, padx=5, pady=5)


#
# Μεταβλητές και ολοκλήρωση του προγράμματος
# ------------------------------------------
#
# Χρειαζόμαστε κάποιες μεταβλητές οι οποίες θα αποθηκεύουν τον χρόνο που μας δίνει
# ο χρήστης. Αυτές πρέπει να είναι τύπου StringVar(), καθότι μ'αυτό τον τύπο λειτου-
# ργούν και τα modules datetime και date, παραπάνω.
#


# Οι μεταβλητές που χρειαζόμαστε για το ξυπνητήρι (αρχικοποίηση):
hour = StringVar()
min = StringVar()
sec = StringVar()

# Κατόπιν, φτιάχνουμε 3 πεδία (Entry) στο παράθυρο, ώστε ο χρήστης να μπορεί να ορίζει
# ώρα αφύπνισης. Μπορούμε εδώ, να πειραματιστούμε και πάλι με τα ttk widgets, ή να αφήσουμε
# την κλασική έκδοση του Tk()
#

# Ώρα στην οποία βάζουμε το ξυπνητήρι να χτυπήσει
hourTime = Entry(clock, textvariable=hour, widtth=10).place(x=105, y=70)
minTime = Entry(clock, textvariable=min, width=10).place(x=145, y=70)
secTime = Entry(clock, textvariable=sec, width=10).place(x=185, y=70)

#
# Ολοκληρώνουμε με τη δημιουργία του αντίστοιχου κουμπιού και το απαραίτητο
# συνεχές mainloop()
#

# Το ξυπνητήρι μπαίνει σε λειτουργία με το πάτημα του κουμπιού
submit = ttk.tk.Button(
    clock, text="Βάζω ξυπνητήρι", width=15, command=activate_alarm
).pack(side=BOTTOM, padx=5, pady=5)

clock.mainloop()
