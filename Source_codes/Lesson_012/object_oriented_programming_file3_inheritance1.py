# Εισαγωγή στην κληρονομικότητα
#
#
#
# Η κληρονομικότητα αποτελεί ένα σημαντικό στοιχείο του αντικειμενοστραφούς
# προγραμματισμού. Μέσω της κληρονομικότητας, μπορούμε να οργανώσουμε τις κλάσεις
# ιεραρχίες, επιτρ´λεποντας την κοινή χρήση χαρακτηριστικών και μεθόδων ανάμεσα σε
# αυτές.
#
# Η ιεραρχία κλάσεων αποτελείται από μια γονική κλάση και μία ή περισσότερες υποκλάσεις.
# Η γονική κλάση είναι η κλάση από την οποία κληρονομούνται τα χαρακτηριστικά και οι
# μέθοδοι, ενώ οι υποκλάσεις είναι οι κλάσεις που κληρονομούν τα χαρακτηριστικά και τις
# μεθόδους από τη γονική κλάση.
#
#
#
#
#
# Παρακάτω φαίνεται ένα παράδειγμα κώδικα που περιγράφει την κληρονομικότητα


# Δημιουργία της γονική κλάσης
class Vehicle:
    def __init__(self, make, model):
        self.make = make
        self.model = model
        
    def information(self):
        print("Make: ", self.make)
        print("Model: ", self.model)
        
    

# Δημιουργία της υποκλάσης που κληρονομεί την κλάση Vehicle
class Car(Vehicle):
    def __init__(self, make, model, displacement):
        # Κλήση του __init__ της γονικής κλάσης
        super().__init__(make, model)
        self.displacement = displacement
    
    def information(self):
        # Κλήση της μεθόδου της γονικής κκλάσης
        super().information()
        print("Displacement: ", self.displacement)
        
    
    

# Δημιουργία αντικειμένων
Car1 = Car("Ford", "Focus", 1600)
Car2 = Car("Toyota", "Corolla", 1800)

# Κλήση μεθόδων αντικειμένων
Car1.information()
Car2.information()



# Στο παραπάνω παράδειγμα, η κλάση "Vehicle" είναι η γονική κλάση και περιέχει
# το χαρακτηριστικό "make" και τη μέθοδο "information". Η κλάση Car είναι μια
# υποκλάση της "Vehicle" και κληρονομεί το χαρακτηριστικό και τη μέθοδο από τη
# γονική κλάση. Η υποοκλάση επίσης έχει ένα δικό της χαρακτηριστικό "displacement"
# και μια μέθοδο "information" που επεκτείνει τη μέθοδο της γονικής κλάσης.
#
# Όταν δημιουργούμε αντικείμενα της υποκλάσης "Car", μπορούμε να καλούμε τη μέθοδο
# "information" τόσο από τη γονική κλάση όσο και από την υποκλάση. Η μέθοδος "super()"
# χρησιμοποιείται για να κληθεί η μέθοδος της γονικής κλάσης. Με αυτόν τον τρόπο, μπο-
# ρούμε να επεκτείνουμε τη λειτουργικότητα της γονικής κλάσης στην υποκλάση.
#
# Η εκτέλεση του παραπάνω κώδικα θα παράγει την ακόλουθη έξοδο:
#   Make: Ford
#   Model: Focus
#   Displacement: 1600
#   Make: Toyota
#   Model: Corolla
#   Displacement: 1800
#
#
#
# Όπως φαίνεται, οι μέθοδοι τόσο της γονικής κλάσης όσο και της υποκλάσης καλούνται
# και παρέχουν τις αντίστοιχες πληροφορίες (information) για τα αυτοκίνητα.
#
# Έτσι, η κληρονομικότητα μας επιτρέπει να δημιουργήσουμε ιεραρχίες κλάσεων και να
# κληρονομήσουμε τα χαρακτηριστικά και τις μεθόδους των γονικών κλάσεων στις υποκλάσεις,
# επεκτείνοντας και προσαρμόζοντας τη λειτουργικότητα σύμφωνα με τις ανάγκες.