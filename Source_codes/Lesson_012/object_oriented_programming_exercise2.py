# exercise 2
#
# Δημιουργήστε μια γονική κλάση "Animal" με μια μέθοδο "sound" που επιστρέφει τον ήχο
# που βγάζει το ζώο. Στη συνέχεια, δημιουργήστε τρεις παιδικές (child) κλάσεις "Dog",
# "Cat", και "Cow" που κληρονομούν από την κλάση "Animal" και υλοποιούν τη μέθοδο\
# "sound" με τον κατάλληλο τρόπο για κάθε ζώο

class Animal:
    def sound(self):
        pass
    

class Dog(Animal):
    def sound(self):
        return "Γαβ"

class Cat(Animal):
    def sound(self):
        return "Μιάου"
    
class Cow(Animal):
    def sound(self):
        return "Μου"


# Δημιουργία στιγμιοτύπων και κλήση μεθόδων
dog = Dog()
print(dog.sound())

cat = Cat()
print(cat.sound())

cow = Cow()
print(cow.sound())


# Σε αυτή την άσκηση, όπως και στην προηγούμενη, χρησιμοποιούμε την έννοι του
# πολυμορφισμού.
# Η γονική κλάση "Animal" ορίζει μια μέθοδο με το όνομα "sound" (ήχος) που δεν κάνει
# τίποτα. Οι παιδικές κλάσεις "Dog", "Cat" και "Cow" κληρονομούν την κλάση "Animal"
# και υλοποιοπούν τη μέθοδο "sound" με διαφορετικό τρόπο για κάθε ζώο
#
# Αυτό σημαίνει ότι κάθε ζώο μπορεί να επιστρέψει τον δικό του ήχο.
# Στη συνέχιεα δημιουργούμε αντικείμενα για κάθε ζώο και εκτυπώνουμε τον ήχο που βγάζει
# κάθε ζώο. Κάθε φορά που καλούμε τη μέθοδο "sound" σε ένα αντικείμενο, επιστρέφεται ο
# σωστός ήχος για το εκάστοτε ζώο.
#
# Έτσι, χρησιμοποιώντας την πολυμορφική φύση της Python, μπορούμε να δημιουργήσουμε
# κλάσεις που κληρονομούν από μια γονική κλάση και υλοποιούν τις μεθόδους με τρόπο που
# είναι κατάλληλο για κάθε παιδική κλάση. Αυτό μας επιτρέπει να δημιουργήσουμε ευέλικτο
# και επαναχρησιμοποιήσιμο κώδικα.